// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using QuickType;
//
//    var geocode = Geocode.FromJson(jsonString);

namespace QuickType
{
    using Newtonsoft.Json;

    public partial class Geocode
    {
        [JsonProperty("name")]
        public string Name { get; set; }

        [JsonProperty("local_names")]
        public LocalNames LocalNames { get; set; }

        [JsonProperty("lat")]
        public double Lat { get; set; }

        [JsonProperty("lon")]
        public double Lon { get; set; }

        [JsonProperty("country")]
        public string Country { get; set; }

        [JsonProperty("state", NullValueHandling = NullValueHandling.Ignore)]
        public string State { get; set; }
    }

    public partial class LocalNames
    {
        [JsonProperty("af", NullValueHandling = NullValueHandling.Ignore)]
        public string Af { get; set; }

        [JsonProperty("ar", NullValueHandling = NullValueHandling.Ignore)]
        public string Ar { get; set; }

        [JsonProperty("ascii")]
        public string Ascii { get; set; }

        [JsonProperty("az", NullValueHandling = NullValueHandling.Ignore)]
        public string Az { get; set; }

        [JsonProperty("bg", NullValueHandling = NullValueHandling.Ignore)]
        public string Bg { get; set; }

        [JsonProperty("ca", NullValueHandling = NullValueHandling.Ignore)]
        public string Ca { get; set; }

        [JsonProperty("da", NullValueHandling = NullValueHandling.Ignore)]
        public string Da { get; set; }

        [JsonProperty("de", NullValueHandling = NullValueHandling.Ignore)]
        public string De { get; set; }

        [JsonProperty("el", NullValueHandling = NullValueHandling.Ignore)]
        public string El { get; set; }

        [JsonProperty("en")]
        public string En { get; set; }

        [JsonProperty("eu", NullValueHandling = NullValueHandling.Ignore)]
        public string Eu { get; set; }

        [JsonProperty("fa", NullValueHandling = NullValueHandling.Ignore)]
        public string Fa { get; set; }

        [JsonProperty("feature_name")]
        public string FeatureName { get; set; }

        [JsonProperty("fi", NullValueHandling = NullValueHandling.Ignore)]
        public string Fi { get; set; }

        [JsonProperty("fr", NullValueHandling = NullValueHandling.Ignore)]
        public string Fr { get; set; }

        [JsonProperty("gl", NullValueHandling = NullValueHandling.Ignore)]
        public string Gl { get; set; }

        [JsonProperty("he", NullValueHandling = NullValueHandling.Ignore)]
        public string He { get; set; }

        [JsonProperty("hi", NullValueHandling = NullValueHandling.Ignore)]
        public string Hi { get; set; }

        [JsonProperty("hr", NullValueHandling = NullValueHandling.Ignore)]
        public string Hr { get; set; }

        [JsonProperty("hu", NullValueHandling = NullValueHandling.Ignore)]
        public string Hu { get; set; }

        [JsonProperty("id", NullValueHandling = NullValueHandling.Ignore)]
        public string Id { get; set; }

        [JsonProperty("it", NullValueHandling = NullValueHandling.Ignore)]
        public string It { get; set; }

        [JsonProperty("ja", NullValueHandling = NullValueHandling.Ignore)]
        public string Ja { get; set; }

        [JsonProperty("la", NullValueHandling = NullValueHandling.Ignore)]
        public string La { get; set; }

        [JsonProperty("lt", NullValueHandling = NullValueHandling.Ignore)]
        public string Lt { get; set; }

        [JsonProperty("mk", NullValueHandling = NullValueHandling.Ignore)]
        public string Mk { get; set; }

        [JsonProperty("nl", NullValueHandling = NullValueHandling.Ignore)]
        public string Nl { get; set; }

        [JsonProperty("no", NullValueHandling = NullValueHandling.Ignore)]
        public string No { get; set; }

        [JsonProperty("pl", NullValueHandling = NullValueHandling.Ignore)]
        public string Pl { get; set; }

        [JsonProperty("pt", NullValueHandling = NullValueHandling.Ignore)]
        public string Pt { get; set; }

        [JsonProperty("ro", NullValueHandling = NullValueHandling.Ignore)]
        public string Ro { get; set; }

        [JsonProperty("ru", NullValueHandling = NullValueHandling.Ignore)]
        public string Ru { get; set; }

        [JsonProperty("sk", NullValueHandling = NullValueHandling.Ignore)]
        public string Sk { get; set; }

        [JsonProperty("sl", NullValueHandling = NullValueHandling.Ignore)]
        public string Sl { get; set; }

        [JsonProperty("sr", NullValueHandling = NullValueHandling.Ignore)]
        public string Sr { get; set; }

        [JsonProperty("th", NullValueHandling = NullValueHandling.Ignore)]
        public string Th { get; set; }

        [JsonProperty("tr", NullValueHandling = NullValueHandling.Ignore)]
        public string Tr { get; set; }

        [JsonProperty("vi", NullValueHandling = NullValueHandling.Ignore)]
        public string Vi { get; set; }

        [JsonProperty("zu", NullValueHandling = NullValueHandling.Ignore)]
        public string Zu { get; set; }
    }

    public partial class Geocode
    {
        public static Geocode[] FromJson(string json) => JsonConvert.DeserializeObject<Geocode[]>(json, Converter.Settings);
    }
}
